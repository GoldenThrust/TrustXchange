
       async filterOfferings(req, res) {
        try {
            const { payinCurrencyCode, payoutCurrencyCode } = req.body;
            const response = {};

            const user = await User.findById(res.locals.jwtData.id);

            if (!user) {
                return res.status(401).json({ status: "ERROR", message: "User not registered OR Token malfunctioned" })
            }

            if (!user.active) {
                return res.status(403).json({ status: "ERROR", message: "Account is not active" });
            }

            const { vc } = user;


            const offeringsData = await this.fetchAllOfferings();

            let once = false;

            offeringsData.forEach(({ key, offerings }) => {
                offerings.forEach(offering => {
                    if (offering.data.payin.currencyCode === payinCurrencyCode && offering.data.payout.currencyCode === payoutCurrencyCode) {
                        if (!response[key]) {
                            response[key] = [];
                        }

                        if (!once) {
                            const presentation = PresentationExchange.selectCredentials({
                                vcJwts: vc,
                                presentationDefinition: offering.data.requiredClaims,
                            });

                            console.log(presentation);

                            once = true;
                        }
                        response[key].push({
                            key,
                            offering
                        });
                    }
                });
            });

            res.json(response);
        } catch (error) {
            res.status(500).json({ error: 'Failed to filter offerings' });
        }
    }